// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteRepoParams creates a new DeleteRepoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteRepoParams() *DeleteRepoParams {
	return &DeleteRepoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepoParamsWithTimeout creates a new DeleteRepoParams object
// with the ability to set a timeout on a request.
func NewDeleteRepoParamsWithTimeout(timeout time.Duration) *DeleteRepoParams {
	return &DeleteRepoParams{
		timeout: timeout,
	}
}

// NewDeleteRepoParamsWithContext creates a new DeleteRepoParams object
// with the ability to set a context for a request.
func NewDeleteRepoParamsWithContext(ctx context.Context) *DeleteRepoParams {
	return &DeleteRepoParams{
		Context: ctx,
	}
}

// NewDeleteRepoParamsWithHTTPClient creates a new DeleteRepoParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteRepoParamsWithHTTPClient(client *http.Client) *DeleteRepoParams {
	return &DeleteRepoParams{
		HTTPClient: client,
	}
}

/*
DeleteRepoParams contains all the parameters to send to the API endpoint

	for the delete repo operation.

	Typically these are written to a http.Request.
*/
type DeleteRepoParams struct {

	/* KeepWebhook.

	   If true and a webhook is installed for this repo, it will not be removed.
	*/
	KeepWebhook *bool

	/* RepoID.

	   ID of the repository to delete.
	*/
	RepoID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete repo params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteRepoParams) WithDefaults() *DeleteRepoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete repo params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteRepoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete repo params
func (o *DeleteRepoParams) WithTimeout(timeout time.Duration) *DeleteRepoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repo params
func (o *DeleteRepoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repo params
func (o *DeleteRepoParams) WithContext(ctx context.Context) *DeleteRepoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repo params
func (o *DeleteRepoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repo params
func (o *DeleteRepoParams) WithHTTPClient(client *http.Client) *DeleteRepoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repo params
func (o *DeleteRepoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeepWebhook adds the keepWebhook to the delete repo params
func (o *DeleteRepoParams) WithKeepWebhook(keepWebhook *bool) *DeleteRepoParams {
	o.SetKeepWebhook(keepWebhook)
	return o
}

// SetKeepWebhook adds the keepWebhook to the delete repo params
func (o *DeleteRepoParams) SetKeepWebhook(keepWebhook *bool) {
	o.KeepWebhook = keepWebhook
}

// WithRepoID adds the repoID to the delete repo params
func (o *DeleteRepoParams) WithRepoID(repoID string) *DeleteRepoParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the delete repo params
func (o *DeleteRepoParams) SetRepoID(repoID string) {
	o.RepoID = repoID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.KeepWebhook != nil {

		// query param keepWebhook
		var qrKeepWebhook bool

		if o.KeepWebhook != nil {
			qrKeepWebhook = *o.KeepWebhook
		}
		qKeepWebhook := swag.FormatBool(qrKeepWebhook)
		if qKeepWebhook != "" {

			if err := r.SetQueryParam("keepWebhook", qKeepWebhook); err != nil {
				return err
			}
		}
	}

	// path param repoID
	if err := r.SetPathParam("repoID", o.RepoID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
