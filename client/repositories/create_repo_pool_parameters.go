// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	garm_params "github.com/cloudbase/garm/params"
)

// NewCreateRepoPoolParams creates a new CreateRepoPoolParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateRepoPoolParams() *CreateRepoPoolParams {
	return &CreateRepoPoolParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateRepoPoolParamsWithTimeout creates a new CreateRepoPoolParams object
// with the ability to set a timeout on a request.
func NewCreateRepoPoolParamsWithTimeout(timeout time.Duration) *CreateRepoPoolParams {
	return &CreateRepoPoolParams{
		timeout: timeout,
	}
}

// NewCreateRepoPoolParamsWithContext creates a new CreateRepoPoolParams object
// with the ability to set a context for a request.
func NewCreateRepoPoolParamsWithContext(ctx context.Context) *CreateRepoPoolParams {
	return &CreateRepoPoolParams{
		Context: ctx,
	}
}

// NewCreateRepoPoolParamsWithHTTPClient creates a new CreateRepoPoolParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateRepoPoolParamsWithHTTPClient(client *http.Client) *CreateRepoPoolParams {
	return &CreateRepoPoolParams{
		HTTPClient: client,
	}
}

/*
CreateRepoPoolParams contains all the parameters to send to the API endpoint

	for the create repo pool operation.

	Typically these are written to a http.Request.
*/
type CreateRepoPoolParams struct {

	/* Body.

	   Parameters used when creating the repository pool.
	*/
	Body garm_params.CreatePoolParams

	/* RepoID.

	   Repository ID.
	*/
	RepoID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create repo pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateRepoPoolParams) WithDefaults() *CreateRepoPoolParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create repo pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateRepoPoolParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create repo pool params
func (o *CreateRepoPoolParams) WithTimeout(timeout time.Duration) *CreateRepoPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create repo pool params
func (o *CreateRepoPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create repo pool params
func (o *CreateRepoPoolParams) WithContext(ctx context.Context) *CreateRepoPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create repo pool params
func (o *CreateRepoPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create repo pool params
func (o *CreateRepoPoolParams) WithHTTPClient(client *http.Client) *CreateRepoPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create repo pool params
func (o *CreateRepoPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the create repo pool params
func (o *CreateRepoPoolParams) WithBody(body garm_params.CreatePoolParams) *CreateRepoPoolParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create repo pool params
func (o *CreateRepoPoolParams) SetBody(body garm_params.CreatePoolParams) {
	o.Body = body
}

// WithRepoID adds the repoID to the create repo pool params
func (o *CreateRepoPoolParams) WithRepoID(repoID string) *CreateRepoPoolParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the create repo pool params
func (o *CreateRepoPoolParams) SetRepoID(repoID string) {
	o.RepoID = repoID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateRepoPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param repoID
	if err := r.SetPathParam("repoID", o.RepoID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
